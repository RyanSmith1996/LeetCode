---Leetcode --- Easy ---- Recyclable and Low Fat Products
Requirement: Write a solution to find the ids of products that are both low fat and recyclable.
             Return the result table in any order.
             The result format is in the following example.
Answer:
select product_id
From Products
Where Low_Fats = 'Y' AND recyclable = 'Y'

-----Leetcode ---- Easy ---- Find Total Time Spent by Each Employee
Requirement: Write a solution to calculate the total time in minutes spent by each employee on each day at the office. 
             Note that within one day, an employee can enter and leave more than once. The time spent in the office for a single entry is out_time - in_time.
             Return the result table in any order.

Answer: 
Select Emp_Id, Event_Day as Day, SUM(Out_Time) - SUM(In_Time) as total_time
From Employees
Group by 1, 2

----Leetcode ---- Easy ---- 1693. Daily Leads and Partners
Requirement:  For each date_id and make_name, find the number of distinct lead_id's and distinct partner_id's.
              Return the result table in any order.

Answer:  
Select Date_Id, Make_Name, COUNT(Distinct lead_id) as unique_leads, COUNT(Distinct partner_id) as unique_partners
from DailySales
Group by 1, 2

----Leetcode ---- Easy ---- 2356. Number of Unique Subjects Taught by Each Teacher
Requirement: Write a solution to calculate the number of unique subjects each teacher teaches in the university.
             Return the result table in any order.

Answer: 
Select teacher_id, COUNT(Distinct Subject_Id) as cnt
From teacher
Group by teacher_id

----Leetcode ---- Easy ---- Rearrange Products Table 

Requirement: Write a solution to rearrange the Products table so that each row has (product_id, store, price). 
             If a product is not available in a store, do not include a row with that product_id and store combination in the result table.
             Return the result table in any order.

Answer: 
Select Product_Id, 'store1' as store, store1 as price
From products
Where store1 is not null
UNION ALL
Select Product_Id, 'store2' as store, store2 as price
From products
where store2 is not null
UNION ALL
Select product_id, 'store3' as store, store3 as price
from products
where store3 is not null


----Leetcode ---- Easy ----- Invalid Tweets

Requirement: Write a solution to find the IDs of the invalid tweets. 
             The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15.
             Return the result table in any order.

Answer:  
Select Tweet_ID
From Tweets
Where LENGTH(content) > 15

---- Leetcode ---- Easy ---- Bank Account Summary II

Requirement: 
Write a solution to report the name and balance of users with a balance higher than 10000. 
The balance of an account is equal to the sum of the amounts of all transactions involving that account.
Return the result table in any order.

Answer:
WITH CTE1 AS
(Select Account, SUM(Amount) as balance
From Transactions
Group by account)

Select name, balance
from users
JOIN CTE1
ON users.account = CTE1.account
HAVING balance > 10000

---- Leetcode ---- Easy ---- Replace Employee ID With The Unique Identifier 

Requirement: Write a solution to show the unique ID of each user, If a user does not have a unique ID replace just show null.
             Return the result table in any order.

Answer: 
Select Unique_id, name
from employees
LEFT JOIN employeeUNI
ON employees.id = employeeUNI.id

---- Leetcode ---- Easy ---- Swap Salary
Requirement: Write a solution to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.
             Note that you must write a single update statement, do not write any select statement for this problem.

Answer:
UPDATE Salary
SET SEX =
 (CASE When Sex = 'M' THEN 'f' ELSE 'm'  END)

---- Leetcode ---- Easy ---- Product Sales Analysis I
Requirement: Write a solution to report the product_name, year, and price for each sale_id in the Sales table.
             Return the resulting table in any order.

Answer: 
Select Product_Name, Year, Price
From Sales
INNER JOIN Product
ON Sales.Product_Id = Product.Product_id

-----Leetcode ---- Easy ---- 1179. Reformat Department Table
Requirement:  Reformat the table such that there is a department id column and a revenue column for each month.
              Return the result table in any order.

Answer: 
Select ID, SUM(CASE WHEN Month = 'Jan' THEN Revenue END ) as Jan_Revenue
, SUM(CASE WHEN Month = 'Feb' THEN Revenue END ) as Feb_Revenue
, SUM(CASE WHEN Month = 'Mar' THEN Revenue END ) as Mar_Revenue
, SUM(CASE WHEN Month = 'Apr' THEN Revenue END ) as Apr_Revenue
, SUM(CASE WHEN Month = 'May' THEN Revenue END ) as May_Revenue
, SUM(CASE WHEN Month = 'Jun' THEN Revenue END ) as Jun_Revenue
, SUM(CASE WHEN Month = 'Jul' THEN Revenue END ) as Jul_Revenue
, SUM(CASE WHEN Month = 'Aug' THEN Revenue END ) as Aug_Revenue
, SUM(CASE WHEN Month = 'Sep' THEN Revenue END ) as Sep_Revenue
, SUM(CASE WHEN Month = 'Oct' THEN Revenue END ) as Oct_Revenue
, SUM(CASE WHEN Month = 'Nov' THEN Revenue END ) as Nov_Revenue
, SUM(CASE WHEN Month = 'Dec' THEN Revenue END ) as Dec_Revenue
From Department 
Group by ID


----- Leetcode ---- Easy ----- The Latest Login in 2020
Requirement: Write a solution to report the latest login for all users in the year 2020. Do not include the users who did not login in 2020.
             Return the result table in any order.

Answer:
Select user_id, MAX(Time_Stamp) as last_stamp
From Logins
Where YEAR(time_stamp) = 2020
Group by User_Id



----- Leetcode ---- Easy ---- Combine Two Tables ------- 
Requirement: 
Write a solution to report the first name, last name, city, and state of each person in the Person table. 
If the address of a personId is not present in the Address table, report null instead.

Answer:
Select firstName, LastName, City, State
From Person
LEFT Join Address
ON Person.PersonID = Address.PersonID

---- Leetcode ---- Easy ---- Group Sold Products By The Date
Requirement: 
Write a solution to find for each date the number of different products sold and their names.
The sold products names for each date should be sorted lexicographically.
Return the result table ordered by sell_date.

Answer: 
Select sell_date, COUNT(Distinct Product) as num_sold, GROUP_CONCAT(Distinct Product) as products
From Activities 
Group by Sell_Date

---- Leetcode ---- Easy ----  Customer Who Visited but Did Not Make Any Transactions

Requirement: 
Write a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.
Return the result table sorted in any order.

Answer:
Select customer_id, COUNT(Visits.Visit_Id) as count_no_trans
From Visits
Left Join Transactions
ON Visits.Visit_Id = Transactions.Visit_Id
Where Transaction_Id is Null
Group by Customer_Id

---- Leetcode ---- Easy ---- Game Play Analysis I

Requirement: 
Write a solution to find the first login date for each player.
Return the result table in any order.

Answer:
Select player_id, MIN(Event_Date) as first_login
From Activity
Group by Player_Id

---- Leetcode ---- Easy ---- Article Views I

Requirement:
Write a solution to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.

Answer:
Select Author_ID as id
From Views
Where Author_Id = Viewer_Id
Group by ID
Order by 1 ASC

---- Leetcode ---- Easy ---- Employee Bonus
Requirement:
Write a solution to report the name and bonus amount of each employee with a bonus less than 1000.
Return the result table in any order.

Answer:
Select name, bonus
From Employee
Left Join Bonus
ON Employee.EmpId = Bonus.EmpId
Where Bonus is Null or Bonus < 1000

---- Leetcode ---- Easy ---- Average Selling Price

Requirement: 
Write a solution to find the average selling price for each product. average_price should be rounded to 2 decimal places.
Return the result table in any order.

Answer:
select p.product_id, coalesce(round(sum(u.units*p.price)/sum(u.units),2),0) as average_price 
from prices p left join unitssold u
on p.product_id = u.product_id and u.purchase_date between p.start_date and p.end_date
group by p.product_id;
