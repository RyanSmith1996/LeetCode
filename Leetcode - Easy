---Leetcode --- Easy ---- Recyclable and Low Fat Products
Requirement: Write a solution to find the ids of products that are both low fat and recyclable.
             Return the result table in any order.
             The result format is in the following example.
Answer:
select product_id
From Products
Where Low_Fats = 'Y' AND recyclable = 'Y'

-----Leetcode ---- Easy ---- Find Total Time Spent by Each Employee
Requirement: Write a solution to calculate the total time in minutes spent by each employee on each day at the office. 
             Note that within one day, an employee can enter and leave more than once. The time spent in the office for a single entry is out_time - in_time.
             Return the result table in any order.

Answer: 
Select Emp_Id, Event_Day as Day, SUM(Out_Time) - SUM(In_Time) as total_time
From Employees
Group by 1, 2

----Leetcode ---- Easy ---- 1693. Daily Leads and Partners
Requirement:  For each date_id and make_name, find the number of distinct lead_id's and distinct partner_id's.
              Return the result table in any order.

Answer:  
Select Date_Id, Make_Name, COUNT(Distinct lead_id) as unique_leads, COUNT(Distinct partner_id) as unique_partners
from DailySales
Group by 1, 2

----Leetcode ---- Easy ---- 2356. Number of Unique Subjects Taught by Each Teacher
Requirement: Write a solution to calculate the number of unique subjects each teacher teaches in the university.
             Return the result table in any order.

Answer: 
Select teacher_id, COUNT(Distinct Subject_Id) as cnt
From teacher
Group by teacher_id

----Leetcode ---- Easy ---- Rearrange Products Table 

Requirement: Write a solution to rearrange the Products table so that each row has (product_id, store, price). 
             If a product is not available in a store, do not include a row with that product_id and store combination in the result table.
             Return the result table in any order.

Answer: 
Select Product_Id, 'store1' as store, store1 as price
From products
Where store1 is not null
UNION ALL
Select Product_Id, 'store2' as store, store2 as price
From products
where store2 is not null
UNION ALL
Select product_id, 'store3' as store, store3 as price
from products
where store3 is not null


----Leetcode ---- Easy ----- Invalid Tweets

Requirement: Write a solution to find the IDs of the invalid tweets. 
             The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15.
             Return the result table in any order.

Answer:  
Select Tweet_ID
From Tweets
Where LENGTH(content) > 15

---- Leetcode ---- Easy ---- Bank Account Summary II

Requirement: 
Write a solution to report the name and balance of users with a balance higher than 10000. 
The balance of an account is equal to the sum of the amounts of all transactions involving that account.
Return the result table in any order.

Answer:
WITH CTE1 AS
(Select Account, SUM(Amount) as balance
From Transactions
Group by account)

Select name, balance
from users
JOIN CTE1
ON users.account = CTE1.account
HAVING balance > 10000

---- Leetcode ---- Easy ---- Replace Employee ID With The Unique Identifier 

Requirement: Write a solution to show the unique ID of each user, If a user does not have a unique ID replace just show null.
             Return the result table in any order.

Answer: 
Select Unique_id, name
from employees
LEFT JOIN employeeUNI
ON employees.id = employeeUNI.id

---- Leetcode ---- Easy ---- Swap Salary
Requirement: Write a solution to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.
             Note that you must write a single update statement, do not write any select statement for this problem.

Answer:
UPDATE Salary
SET SEX =
 (CASE When Sex = 'M' THEN 'f' ELSE 'm'  END)

---- Leetcode ---- Easy ---- Product Sales Analysis I
Requirement: Write a solution to report the product_name, year, and price for each sale_id in the Sales table.
             Return the resulting table in any order.

Answer: 
Select Product_Name, Year, Price
From Sales
INNER JOIN Product
ON Sales.Product_Id = Product.Product_id

-----Leetcode ---- Easy ---- 1179. Reformat Department Table
Requirement:  Reformat the table such that there is a department id column and a revenue column for each month.
              Return the result table in any order.

Answer: 
Select ID, SUM(CASE WHEN Month = 'Jan' THEN Revenue END ) as Jan_Revenue
, SUM(CASE WHEN Month = 'Feb' THEN Revenue END ) as Feb_Revenue
, SUM(CASE WHEN Month = 'Mar' THEN Revenue END ) as Mar_Revenue
, SUM(CASE WHEN Month = 'Apr' THEN Revenue END ) as Apr_Revenue
, SUM(CASE WHEN Month = 'May' THEN Revenue END ) as May_Revenue
, SUM(CASE WHEN Month = 'Jun' THEN Revenue END ) as Jun_Revenue
, SUM(CASE WHEN Month = 'Jul' THEN Revenue END ) as Jul_Revenue
, SUM(CASE WHEN Month = 'Aug' THEN Revenue END ) as Aug_Revenue
, SUM(CASE WHEN Month = 'Sep' THEN Revenue END ) as Sep_Revenue
, SUM(CASE WHEN Month = 'Oct' THEN Revenue END ) as Oct_Revenue
, SUM(CASE WHEN Month = 'Nov' THEN Revenue END ) as Nov_Revenue
, SUM(CASE WHEN Month = 'Dec' THEN Revenue END ) as Dec_Revenue
From Department 
Group by ID


----- Leetcode ---- Easy ----- The Latest Login in 2020
Requirement: Write a solution to report the latest login for all users in the year 2020. Do not include the users who did not login in 2020.
             Return the result table in any order.

Answer:
Select user_id, MAX(Time_Stamp) as last_stamp
From Logins
Where YEAR(time_stamp) = 2020
Group by User_Id



----- Leetcode ---- Easy ---- Combine Two Tables ------- 
Requirement: 
Write a solution to report the first name, last name, city, and state of each person in the Person table. 
If the address of a personId is not present in the Address table, report null instead.

Answer:
Select firstName, LastName, City, State
From Person
LEFT Join Address
ON Person.PersonID = Address.PersonID

---- Leetcode ---- Easy ---- Group Sold Products By The Date
Requirement: 
Write a solution to find for each date the number of different products sold and their names.
The sold products names for each date should be sorted lexicographically.
Return the result table ordered by sell_date.

Answer: 
Select sell_date, COUNT(Distinct Product) as num_sold, GROUP_CONCAT(Distinct Product) as products
From Activities 
Group by Sell_Date

---- Leetcode ---- Easy ----  Customer Who Visited but Did Not Make Any Transactions

Requirement: 
Write a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.
Return the result table sorted in any order.

Answer:
Select customer_id, COUNT(Visits.Visit_Id) as count_no_trans
From Visits
Left Join Transactions
ON Visits.Visit_Id = Transactions.Visit_Id
Where Transaction_Id is Null
Group by Customer_Id

---- Leetcode ---- Easy ---- Game Play Analysis I

Requirement: 
Write a solution to find the first login date for each player.
Return the result table in any order.

Answer:
Select player_id, MIN(Event_Date) as first_login
From Activity
Group by Player_Id

---- Leetcode ---- Easy ---- Article Views I

Requirement:
Write a solution to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.

Answer:
Select Author_ID as id
From Views
Where Author_Id = Viewer_Id
Group by ID
Order by 1 ASC

---- Leetcode ---- Easy ---- Employee Bonus
Requirement:
Write a solution to report the name and bonus amount of each employee with a bonus less than 1000.
Return the result table in any order.

Answer:
Select name, bonus
From Employee
Left Join Bonus
ON Employee.EmpId = Bonus.EmpId
Where Bonus is Null or Bonus < 1000

---- Leetcode ---- Easy ---- Average Selling Price

Requirement: 
Write a solution to find the average selling price for each product. average_price should be rounded to 2 decimal places.
Return the result table in any order.

Answer:
select p.product_id, coalesce(round(sum(u.units*p.price)/sum(u.units),2),0) as average_price 
from prices p left join unitssold u
on p.product_id = u.product_id and u.purchase_date between p.start_date and p.end_date
group by p.product_id;

---- Leetcode ---- Easy ---- Not Boring Movies
Requirement:  
Write a solution to report the movies with an odd-numbered ID and a description that is not "boring".
Return the result table ordered by rating in descending order.

Answer:
Select id, movie, description, rating
from cinema
where MOD(ID,2) AND Description <> 'Boring' 
Order by 4 DESC

---- Leetcode --- Easy ---- Employees With Missing Information
Requirement: 
Write a solution to report the IDs of all the employees with missing information. The information of an employee is missing if:
The employee's name is missing, or
The employee's salary is missing.
Return the result table ordered by employee_id in ascending order.

Answer:
Select employee_id
From Employees
Where Employee_ID NOT IN (Select Employee_ID From Salaries)
UNION
Select Employee_id
From Salaries
Where Employee_Id NOT IN (Select Employee_Id From Employees)
Order by employee_id

---- Leetcode --- Easy ---- List the Products Ordered in a Period
Requirement: 
Write a solution to get the names of products that have at least 100 units ordered in February 2020 and their amount.
Return the result table in any order.

Answer:
WITH CTE1 AS
(Select Product_ID, SUm(Unit) as Sumofunits
From Orders
Where Order_Date between '2020-02-01' AND '2020-02-29'
Group by product_id)

Select Product_name, Sumofunits as unit
From CTE1
JOIN Products
ON CTE1.Product_ID = Products.Product_id
Having sumofunits >= 100

----- Leetcode ---- Easy ------ Duplicate Emails

Requirement: 
Write a solution to report all the duplicate emails. Note that it's guaranteed that the email field is not NULL.
Return the result table in any order.

Answer:
Select Email
From Person
Group by email
HAVING COUNT(Email) > 1


---- Leetcode ---- Easy ----- Actors and Directors Who Cooperated At Least Three Times
Requirement:
Write a solution to find all the pairs (actor_id, director_id) where the actor has cooperated with the director at least three times.
Return the result table in any order.

Answer:
Select Actor_Id, Director_Id
From ActorDirector
Group by Actor_ID, Director_Id
HAVING COUNT(*) >= 3

---- Leetcoce ---- Easy ----- Find Followers Count
Requirement:
Write a solution that will, for each user, return the number of followers.
Return the result table ordered by user_id in ascending order.

Answer:
Select User_Id,  COUNT(Follower_Id) as followers_count
From Followers
Group by user_id
Order by User_id

----Leetcode ---- Easy ----- Find Customer Referee

Requirement:
Find the names of the customer that are not referred by the customer with id = 2.
Return the result table in any order

Answer:
Select Name
From Customer
Where Referee_Id is null or referee_id <> 2

----Leetcode ---- Easy ----- Average Time of Process per Machine

Requirement
There is a factory website that has several machines each running the same number of processes. Write a solution to find the average time each machine takes to complete a process.
The time to complete a process is the 'end' timestamp minus the 'start' timestamp. The average time is calculated by the total time to complete every process on the machine divided by the number of processes that were run.
The resulting table should have the machine_id along with the average time as processing_time, which should be rounded to 3 decimal places.
Return the result table in any order.

Answer:
select machine_id,
round((sum(case when activity_type = 'end' then timestamp else 0 end) - sum(case when activity_type = 'start' then timestamp else 0 end)) / Count(distinct(process_id)),3) as processing_time
from activity
group by machine_id

----Leetcode ---- Easy ----- Customers Who Never Order
Requirement:
Write a solution to find all customers who never order anything.
Return the result table in any order.

Answer:
Select Name as Customers
From Customers C
LEFT Join Orders O
ON C.id = o.customerid
Where CustomerId is null


----Leetcode ---- Easy ----- Sales Person
Requirement: 
Write a solution to find the names of all the salespersons who did not have any orders related to the company with the name "RED".
Return the result table in any order.

Answer:
Select SP.Name
From SalesPerson SP
Where SP.Name NOT IN
(Select SP.Name
From SalesPerson SP
LEFT JOIN Orders O
ON SP.Sales_Id = O.Sales_Id  
LEFT JOIN Company C
ON  O.com_id = C.com_id 
Where C.Name = 'RED')



----Leetcode ---- Easy ----- Customer Placing the Largest Number of Orders
Requirement:
Write a solution to find the customer_number for the customer who has placed the largest number of orders.
The test cases are generated so that exactly one customer will have placed more orders than any other customer.

Answer:
Select customer_number
from orders
Group by customer_number
Order by COUNT(1) desc
Limit 1


----Leetcode ---- Easy ----- Queries Quality and Percentage

Requirement:
We define query quality as:
The average of the ratio between query rating and its position.
We also define poor query percentage as:
The percentage of all queries with rating less than 3.
Write a solution to find each query_name, the quality and poor_query_percentage.
Both quality and poor_query_percentage should be rounded to 2 decimal places.
Return the result table in any order.

Answer:
Select Query_Name, Round(AVG(rating/position),2) as quality, ROUND(Sum(CASE When rating < 3 Then 1 else 0 end)/COUNT(rating) * 100,2) as poor_query_percentage
From Queries
Group by query_name

----Leetcode ---- Easy ----- Project Employees I

Requirement:
Write an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits.
Return the result table in any order.

Answer:
Select Project_Id,  ROUND(AVG(experience_years),2) as average_years
From Project  PROJ
Left Join Employee EM
ON PROJ.employee_id = em.employee_id
Group by project_id

----Leetcode ---- Easy ----- Fix Names in a Table
Requirement:
Write a solution to fix the names so that only the first character is uppercase and the rest are lowercase.

Return the result table ordered by user_id.

Answer:
select user_id, CONCAT(upper(substring(name,1,1)),'',lower(Substr(name,2))) as name
from users
order by user_id

----Leetcode ---- Easy ----- Delete Duplicate Emails
Requirement:
Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.
For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.
For Pandas users, please note that you are supposed to modify Person in place.
After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.

Answer:
WITH CTE1 AS
(Select MIN(ID) as KEEPID
From Person
Group by Email)

Delete from person Where ID NOT IN (Select KEEPID from CTE1)

----Leetcode ---- Easy ----- Top Travellers

Requirement:
Write a solution to report the distance traveled by each user.
Return the result table ordered by travelled_distance in descending order, if two or more users traveled the same distance, order them by their name in ascending order.

Answer:
Select Name, IFNULL(SUM(Distance),0) as travelled_distance 
From Users U
LEFT JOIN Rides R
ON U.id = r.user_id
group by user_id
order by 2 desc, 1 asc

----Leetcode ---- Easy ----- Students and Examinations

Requirement:
Write a solution to find the number of times each student attended each exam.
Return the result table ordered by student_id and subject_name.

Answer:
select st.student_id, st.student_name, s.subject_name, COUNT(e.student_id) as attended_exams
from students st
CROSS JOIN subjects s 
LEFT JOIN examinations e on st.student_id = e.student_id AND s.subject_name = e.subject_name
Group by st.student_id, s.subject_name
Order by st.student_id, s.subject_name

----Leetcode ---- Easy ----- Calculate Special Bonus

Requirement:
Write a solution to calculate the bonus of each employee. The bonus of an employee is 100% of their salary if the ID of the employee is an odd number and the employee's name does not start with the character 'M'. The bonus of an employee is 0 otherwise.
Return the result table ordered by employee_id.

Answer:
Select employee_Id,
CASE
WHEN MOD(Employee_ID,2) <> 0 AND NAME NOT LIKE'M%' THEN SALARY
ELSE 0 
END AS bonus
From Employees
Order by Employee_ID

----Leetcode ---- Easy ----- Percentage of Users Attended a Contest
Requirement: 
Write a solution to find the percentage of the users registered in each contest rounded to two decimals.
Return the result table ordered by percentage in descending order. 
In case of a tie, order it by contest_id in ascending order.

Answer:
WITH CTE1 As
(Select Contest_Id, COUNT(User_id) as participation
From Register
Group by 1
Order by contest_id)

Select contest_id, round(participation/count(user_id)*100,2) as percentage
from CTE1, users
Group by contest_id
Order by 2 desc, 1 asc

----Leetcode ---- Easy ----- Biggest Single Number
Requirement:
A single number is a number that appeared only once in the MyNumbers table.
Find the largest single number. If there is no single number, report null.

Answer:
WITH CTE1 as
(Select num, count(*)
From mynumbers
group by 1
having count(*) <2)

select MAX(num) as num from CTE1

----Leetcode ---- Easy ----- Classes More Than 5 Students

Requirement:
Write a solution to find all the classes that have at least five students.
Return the result table in any order.

Answer:
Select Class
From Courses
Group by Class
HAVING COUNT(Student) >= 5

----Leetcode ---- Easy ----- User Activity for the Past 30 Days I

Requirement:
Write a solution to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on someday if they made at least one activity on that day.
Return the result table in any order.

Answer:
Select distinct activity_date as 'day',  COUNT(distinct user_id) as active_users
from activity
where activity_date between '2019-06-28' AND '2019-07-27'
group by 1

----Leetcode ---- Easy ----- Employees Whose Manager Left the Company

Requirement:
Find the IDs of the employees whose salary is strictly less than $30000 and whose manager left the company. 
When a manager leaves the company, their information is deleted from the Employees table, but the reports still have their manager_id set to the manager that left.
Return the result table ordered by employee_id.

Answer:
Select employee_id from employees where manager_id NOT IN
(Select Employee_ID 
From Employees)
AND Salary < 30000
order by 1

----Leetcode ---- Easy ----- Sales Analysis III

Requirement:
Write a solution to report the products that were only sold in the first quarter of 2019. 
That is, between 2019-01-01 and 2019-03-31 inclusive.
Return the result table in any order.

Answer:
Select distinct p.product_id,p.product_name
from Product p
inner Join Sales s on p.product_id=s.product_id
where p.product_id NOT IN (select product_id from Sales where 
sale_date not between '2019-01-01' and '2019-03-31' );

----Leetcode ---- Easy ----- Rising Temperature
Requirement:
Write a solution to find all dates' Id with higher temperatures compared to its previous dates (yesterday).
Return the result table in any order.

Answer:
WITH CTE1 AS
(Select id, recorddate, LAG(recorddate) over (order by recorddate asc) as previousdate, temperature, LAG(temperature) OVER (order by recorddate asc) as previoustemperature
from weather)

Select Id
From CTE1
Where DATEDIFF (recorddate, previousdate) = 1  and temperature  > previoustemperature 


----Leetcode ---- Easy ----- The Number of Employees Which Report to Each Employee
Requirement:
For this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.
Write a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.
Return the result table ordered by employee_id.

Answer:
WITH CTE1 AS
(Select reports_to, ROUND(AVG(age),0) as average_age, COUNT(reports_to) as reports_count
from employees
Group by reports_to)

select employee_id, name, reports_count, average_age
from CTE1
JOIN employees ON employees.employee_id = CTE1.reports_to
order by employee_id

----Leetcode ---- Easy ----- Patients With a Condition
Requirement:
Write a solution to find the patient_id, patient_name, and conditions of the patients who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix.
Return the result table in any order.

Answer:
Select patient_id, patient_name, conditions
from patients
where conditions like 'DIAB1%' or conditions like '% DIAB1%'



